version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: redshift-emulator
    environment:
      POSTGRES_USER: redshift_user
      POSTGRES_PASSWORD: redshift_password
      POSTGRES_DB: redshift_db
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U redshift_user -d redshift_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: redshift-backend
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      - REDSHIFT_HOST=postgres
      - REDSHIFT_PORT=5432
      - REDSHIFT_USER=redshift_user
      - REDSHIFT_PASSWORD=redshift_password
      - REDSHIFT_DATABASE=redshift_db
      - AWS_ACCESS_KEY_ID=minio_user
      - AWS_SECRET_ACCESS_KEY=minio_password
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000
      - S3_BUCKET=redshift-app-bucket
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: redshift-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      # Exclude node_modules from the mount to use the container's node_modules
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=3000

  minio:
    image: minio/minio
    container_name: s3-emulator
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    build:
      context: ./minio-init
      dockerfile: Dockerfile
    container_name: minio-init
    depends_on:
      minio:
        condition: service_started
    environment:
      - AWS_ACCESS_KEY_ID=minio_user
      - AWS_SECRET_ACCESS_KEY=minio_password
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000
      - S3_BUCKET=redshift-app-bucket
    networks:
      - app-network
    restart: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
